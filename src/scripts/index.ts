
// pnpm tsx src/scripts/index.ts

// 解析smart_order_router的calldata数据

import { CommandParser } from '@uniswap/universal-router-sdk'
import { formatEther } from 'ethers/lib/utils'

// 这是你从 quote API 得到的 response 模拟数据
const apiResponse = {
    "quote": "0.023038538657681574",
    "route": [
        {
            "protocol": "V4",
            "percent": 100,
            "pools": [
                {
                    "token0": {
                        "symbol": "ETH"
                    },
                    "token1": {
                        "symbol": "RPL"
                    },
                    "fee": 3000
                }
            ]
        }
    ],
    "gasUsd": "0.26895961208630071",
    "calldata": "0x24856bc300000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000003c0000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000003070b0e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000022000000000000000000000000000000000000000000000000000000000000002a000000000000000000000000000000000000000000000000000000000000001a00000000000000000000000000000000000000000000000000000000000000020000000000000000000000000d33526068d116ce69f19a9ee46f0bd304f21a51f00000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000008ac7230489e800000000000000000000000000000000000000000000000000000051712ed49285bd0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000bb8000000000000000000000000000000000000000000000000000000000000003c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000060000000000000000000000000d33526068d116ce69f19a9ee46f0bd304f21a51f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008b807b96c111ddfca0c8e59b94c510e7be7c702e0000000000000000000000000000000000000000000000000000000000000000",
    "value": "0x00",
    "to": "0x66a9893cc07d91d95644aedd05d03f95e1dba8af",
    "priceImpact": "1.015"
}

// 解析 calldata
const decoded = CommandParser.parseCalldata(apiResponse.calldata)

// === 输出结构化 JSON ===
const formatted = decoded.commands.map((cmd) => {
  return {
    command: cmd.commandName,
    params: cmd.params.map((p) => ({
      name: p.name,
      value: Array.isArray(p.value)
        ? p.value.map((v) =>
            typeof v === 'object' && v !== null ? v : String(v)
          )
        : p.value && p.value._isBigNumber
        ? formatEther(p.value._hex)
        : String(p.value),
    })),
  }
})

console.log('\n Structured JSON Output:')
console.log(
  JSON.stringify(
    {
      ethValue: formatEther(BigInt(apiResponse.value)),
      commands: formatted,
    },
    null,
    2
  )
)